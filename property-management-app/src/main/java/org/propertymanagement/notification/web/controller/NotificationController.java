package org.propertymanagement.notification.web.controller;

import jakarta.validation.Valid;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Positive;
import lombok.Builder;
import lombok.Data;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.propertymanagement.associationmeeting.MeetingScheduler;
import org.propertymanagement.domain.*;
import org.propertymanagement.domain.Participant.ParticipantRole;
import org.propertymanagement.util.CorrelationIdLog;
import org.propertymanagement.util.CorrelationIdUtil;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import java.net.URI;
import java.util.List;

/**
 * Endpoints for testing purposes
 */
@RestController
@RequestMapping(path = "/test/notifications", produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
@RequiredArgsConstructor
@Slf4j
public class NotificationController {
    private final CorrelationIdLog correlationIdLog;
    private final MeetingScheduler meetingScheduler;

    @GetMapping(path = "/lookup")
    public String lookup() {
        return "Lookup successful!";
    }

    /*
        curl -v -X POST 'http://localhost:8288/test/notifications' -H "Content-Type: application/json" -d '{"notificationType":"MEETING_NOTIFICATION","date":"01/12/2024","time":"19:00","communityId":1,"recipientIds":[1,2,3,4]}'
        curl -v --user admin:admin -X POST 'http://localhost:8288/test/notifications' -H "Content-Type: application/json" -d '{"notificationType":"MEETING_NOTIFICATION","date":"01/12/2024","time":"19:00","communityId":1,"recipientIds":[1,2,3,4]}'
    */
    @PostMapping
    public ResponseEntity<NotificationResponseDto> sendNotification(@Valid @RequestBody NotificationRequestDto request) {
        return correlationIdLog.execWithAutogeneratedCorrelationId("TEST", () -> {
            String correlationId = correlationIdLog.getCorrelationId();
            log.info("Test - Received new notification to be sent. Request={} CorrelationId={}", request, correlationId);
            ScheduledAssociationMeeting scheduledMeeting = new ScheduledAssociationMeeting(
                    new CommunityId(request.getCommunityId()),
                    new MeetingDate(request.getDate()),
                    new MeetingTime(request.getTime()),
                    request.getRecipientIds().stream().map(id ->
                            {
                                Integer recipientId = Math.toIntExact(id);
                                return switch (recipientId) {
                                     case 1 ->
                                             new Participant(
                                                     new NeighbourgId(id),
                                                     ParticipantRole.PRESIDENT,
                                                     new Name("Mr president"),
                                                     new PhoneNumber("+11111111111"),
                                                     new Email("president@test.com"));
                                     case 2 -> new Participant(
                                             new NeighbourgId(id),
                                             ParticipantRole.VICEPRESIDENT,
                                             new Name("Mr vicepresident"),
                                             new PhoneNumber("+22222222222"),
                                             new Email("vicepresident@test.com"));
                                     default -> new Participant(
                                             new NeighbourgId(id),
                                             ParticipantRole.COMMUNITY_MEMBER,
                                             new Name("Member " + recipientId),
                                             new PhoneNumber(recipientId + "0000000000"),
                                             new Email("member" + recipientId + "@test.com"));

                                 };
                            }).toList(),
                    CorrelationIdUtil.correlationIdAsBytes(correlationId)
            );
            meetingScheduler.notifyParticipants(scheduledMeeting);

            URI uri = ServletUriComponentsBuilder.fromCurrentRequest()
                    .replacePath("/test/correlationId/{correlationId}")
                    .buildAndExpand(correlationId)
                    .toUri();
            return ResponseEntity
                    .created(uri)
                    .body(NotificationResponseDto.builder()
                            .correlationId(correlationId)
                            .description("Notification sent").build()
                    );
        });
    }

    @Data
    public static class NotificationRequestDto {
        @NotNull(message = "Notification type must be provided")
        private String notificationType;
        @NotBlank(message = "Notification date must be provided")
        private String date;
        @NotBlank(message = "Notification time must be provided")
        private String time;
        @Positive(message = "Community identifier must be provided")
        private Long communityId;
        @NotEmpty(message = "A list of recipient identifiers must be provided")
        private List<Long> recipientIds;
    }

    @Builder
    @Data
    public static class NotificationResponseDto {
        private String correlationId;
        private String description;
    }

}
