package org.propertymanagement.associationmeeting.notifier;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.propertymanagement.associationmeeting.exception.MeetingScheduleException;
import org.propertymanagement.associationmeeting.notification.MeetingNotification;
import org.propertymanagement.associationmeeting.repository.MeetingRepository;
import org.propertymanagement.domain.*;
import org.propertymanagement.domain.notification.Meeting;
import org.propertymanagement.domain.notification.NotificationDelivery;
import org.propertymanagement.domain.notification.NotificationRequest.NotificationChannel;
import org.propertymanagement.domain.notification.Recipient;
import org.propertymanagement.notification.NotificationManager;
import org.propertymanagement.util.CorrelationIdLog;

import java.util.ArrayList;
import java.util.List;

import static java.util.Objects.nonNull;
import static org.propertymanagement.domain.notification.NotificationRequest.NotificationChannel.EMAIL;
import static org.propertymanagement.domain.notification.NotificationRequest.NotificationChannel.SMS;


@RequiredArgsConstructor
@Slf4j
public class ManualMeetingNotifier implements MeetingNotification {
    private final NotificationManager notificationManager;
    private final MeetingRepository meetingRepository;
    private final CorrelationIdLog correlationIdLog;

    @Override
    public void notifyForApproval(MeetingInvite invite) {
        correlationIdLog.execWithAutogeneratedCorrelationId(CorrelationIdLog.START, () -> {
                    NeighbourgId approverId = new NeighbourgId(invite.getApproverId().value());

                    ScheduledAssociationMeeting scheduledAssociationMeeting = meetingRepository.fetchScheduledAssociationMeeting(invite.getCommunityId(), invite.getTrackerId());
                    Participant president = scheduledAssociationMeeting.participants().stream()
                            .filter(participant -> participant.role() == Participant.ParticipantRole.PRESIDENT && participant.id().equals(invite.getApproverId()))
                            .findFirst()
                            .orElseThrow(() -> {
                                String message = "President approver not found Id=" + approverId.value() + " CommunityId=" + invite.getCommunityId().value();
                                return new MeetingScheduleException(message, "Unable to approve the meeting schedule as approver not found");
                            });

                    List<Recipient> recipients = newRecipients(president);
                    recipients.forEach(recipient -> {
                        var notification = new NotificationDelivery<>(
                                NotificationDelivery.NotificationType.MEETING,
                                invite.getCorrelationId(),
                                invite.getCommunityId(),
                                recipient,
                                newMeeting(invite)
                        );
                        notificationManager.sendNotification(notification);
                    });
                }
        );
    }

    @Override
    public void notifyMeetingToParticipants(ScheduledAssociationMeeting scheduledMeeting) {
        throw new UnsupportedOperationException("Notification to participants is disallowed");
    }

    @Override
    public void notifyForCreation(MeetingInvite invite) {
        throw new UnsupportedOperationException("Notification for creation is disallowed");
    }

    private Meeting newMeeting(MeetingInvite invite) {
        StringBuilder description = new StringBuilder();
        description.append("Yearly Community Association Meeting\n\n")
                .append("CommunityId: ").append(invite.getCommunityId().value()).append("\n")
                .append("ApproverId: ").append(invite.getApproverId().value()).append("\n")
                .append("TrackerId: ").append(invite.getTrackerId().value());

        return new Meeting(
                invite.getDate(),
                invite.getTime(),
                new MeetingSubject("Please approved the yearly Community Association Meeting", description.toString()),
                invite.getCorrelationId()
        );
    }

    private List<Recipient> newRecipients(Participant participant) {
        var recipients = new ArrayList<Recipient>();
        var phoneNumber = participant.phoneNumber();
        if (nonNull(phoneNumber) && nonNull(phoneNumber.value()) && !phoneNumber.value().isBlank()) {
            recipients.add(newRecipient(participant, SMS, phoneNumber.value()));
        }
        var email = participant.email();
        if (nonNull(email) && nonNull(email.value()) && !email.value().isBlank()) {
            recipients.add(newRecipient(participant, EMAIL, email.value()));
        }

        return recipients;
    }

    private Recipient newRecipient(Participant participant, NotificationChannel channel, String address) {
        return new Recipient(
                participant.id(),
                channel,
                channel == SMS ? new PhoneNumber(address) : new Email(address),
                participant.name());
    }
}
