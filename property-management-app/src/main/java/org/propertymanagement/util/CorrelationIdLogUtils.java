package org.propertymanagement.util;

import org.slf4j.MDC;

import java.util.Map;
import java.util.concurrent.Callable;

import static org.propertymanagement.util.CorrelationIdGenerator.MDC_CORRELATION_ID;

/**
 * Generate an ID to correlate actions/steps for a business operation/transaction in the LOG file
 */
public class CorrelationIdLogUtils implements CorrelationIdLog {
    public static final String SEPARATOR = "-";

    private static final CorrelationIdGenerator GENERATOR = new CorrelationIdGenerator();

    @Override
    public void execWithAutogeneratedCorrelationId(String correlationIdPrefix, Runnable action) {
        try {
            setAndGetAutogeneratedCorrelationId(correlationIdPrefix);
            action.run();
        } finally {
            cleanCorrelationId();
        }
    }

    @Override
    public <V> V execWithAutogeneratedCorrelationId(String correlationIdPrefix, Callable<V> action) {
        try {
            setAndGetAutogeneratedCorrelationId(correlationIdPrefix);
            return action.call();
        } catch (Exception e) {
            throw new RuntimeException(e);
        } finally {
            cleanCorrelationId();
        }
    }

    @Override
    public void execWithProvidedCorrelationId(String correlationId, Runnable action) {
        try {
            setAndGetCorrelationId(correlationId);
            action.run();
        } finally {
            cleanCorrelationId();
        }
    }

    @Override
    public <V> V execWithProvidedCorrelationId(String correlationId, Callable<V> action) {
        try {
            setAndGetCorrelationId(correlationId);
            return action.call();
        } catch (Exception e) {
            throw new RuntimeException(e);
        } finally {
            cleanCorrelationId();
        }
    }

    @Override
    public String getCorrelationId() {
        return MDC.get(MDC_CORRELATION_ID);
    }

    public void setAndGetAutogeneratedCorrelationId(String prefix) {
        setAndGetAutogeneratedCorrelationId(prefix, GENERATOR.nextRequestId());
    }

    @Override
    public Map<String, String> getCopyOfContextMap() {
        return MDC.getCopyOfContextMap();
    }

    @Override
    public void setContextMap(Map<String, String> contextMap) {
        MDC.setContextMap(contextMap);
    }

    private String setAndGetCorrelationId(String correlationId) {
        MDC.put(MDC_CORRELATION_ID, correlationId);
        return correlationId;
    }

    private String setAndGetAutogeneratedCorrelationId(String prefix, CharSequence globalId) {
        boolean alreadyHasPrefix = globalId.toString().contains(prefix + SEPARATOR);
        String requestId = alreadyHasPrefix ? globalId.toString() : prefix + SEPARATOR + globalId;
        MDC.put(MDC_CORRELATION_ID, requestId);
        return requestId;
    }

    private void cleanCorrelationId() {
        MDC.remove(MDC_CORRELATION_ID);
    }

}
