spring.application.name=property-management
server.port=8288
info.app.name=Property Management
info.app.description=Property Management Service
info.app.version=@project.version@

#logging.logstash.server=localhost:9600
logging.pattern.console=%date %-5level [%-62.62t{61}] %-75.45logger{74} :  %m%n ${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}
#logging.pattern.console=%date %-5level [%-42.42t{41}] %-45.45logger{44} :  %m%n ${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}
# DefaultLogbackConfiguration
#${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd'T'HH:mm:ss.SSSXXX}){faint} %clr(%5p){} %clr(${PID:-}){magenta} %clr(--- %esb(){APPLICATION_NAME}%esb{APPLICATION_GROUP}[%15.15t] ${LOG_CORRELATION_PATTERN:-}){faint}%clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}
#logging.pattern.console=%date severity=%-5level logger="%logger" thread="%thread" iId=%X{iId} msg="%msg"%n
logging.level.io.confluent=info
logging.level.org.springframework.web.reactive=debug
logging.level.org.apache.kafka.clients.NetworkClient=info
logging.level.org.apache.kafka.clients.consumer.internals.FetchCollector=info
logging.level.org.propertymanagement.associationmeeting.notifier.KafkaMeetingNotifier=debug
#logging.level.org.springframework.web=info
#logging.level.org.springframework.data=info
logging.level.org.springframework.web=info
logging.level.org.springframework.security=info
debug=false

# JPA - Hibernate configuration
spring.jpa.open-in-view=false
spring.jpa.show-sql=true
# Values: none, create-drop, update
spring.jpa.hibernate.ddl-auto=none
spring.jpa.generate-ddl=false
# Schema and data load are done when the database does not exist at database startup (check docker-compose.yml for database service)
#spring.jpa.defer-datasource-initialization=false
spring.jpa.defer-datasource-initialization=false
# Run always data.sql (embedded | always | never) embedded only in-memory database H2, Derby
spring.sql.init.mode=never

# Database configuration (default local MySql)
spring.datasource.url=jdbc:mysql://localhost:3306/propertymanagement
spring.datasource.username=root
spring.datasource.password=password

# Database Hiraki pool https://github.com/brettwooldridge/HikariCP#gear-configuration-knobs-baby
spring.datasource.hikari.minimum-idle=10
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.auto-commit=true
spring.datasource.hikari.pool-name=HikariPool
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.connection-timeout=30000

# Kafka configuration
#https://medium.com/ing-tech-romania/implementing-a-basic-kafka-producer-and-consumer-using-spring-boot-spring-kafka-and-avro-schema-2b6d06e6c4cf

kafka.topic.group-id.meeting=property-management-meeting-group-id
kafka.topic.creation=off
kafka.theadpool.size=30

spring.kafka.consumer.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=${kafka.topic.group-id.meeting}
spring.kafka.consumer.auto-offset-reset=earliest
#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
spring.kafka.consumer.key-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
spring.kafka.consumer.properties.spring.deserializer.key.delegate.class=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.properties.spring.deserializer.value.delegate.class=io.confluent.kafka.serializers.KafkaAvroDeserializer
spring.kafka.consumer.properties.allow.auto.create.topics=false

# kafka-singlenode.yml setup
#spring.kafka.producer.bootstrap-servers=localhost:9092
# kafka-multinode.yml setup
spring.kafka.producer.bootstrap-servers=localhost:9092,localhost:9093,localhost:9094
#spring.kafka.producer.acks=all
#spring.kafka.producer.retries=50
#spring.kafka.producer.properties.retry.backoff.ms=250
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
spring.kafka.producer.properties.allow.auto.create.topics=false

spring.kafka.properties.specific.avro.reader=true
# kafka-singlenode.yml setup
#spring.kafka.properties.schema.registry.url=http://localhost:8081
# kafka-multinode.yml setup
spring.kafka.properties.schema.registry.url=http://localhost:9021

# Controls a notification retry either SMS or e-mail Must be enabled along with email.retries and/or sms.retris
notification.retry=off

# Email configuration
email.retries=on
email.integration=on
email.subject=Community Association Meeting
spring.mail.host=${email.host:smtp.gmail.com}
spring.mail.port=${email.port:587}
spring.mail.username=${mail.username}
spring.mail.password=${mail.password}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.debug=false

# SMS configuration
sms.retries=on
sms.twilio.integration=off
twilio.accountId=${TWILIO_SID:defaultsid}
twilio.authtoken=${TWILIO_AUTH_TOKEN:defaultauthtoken}

# Meeting configuration to enable automatic approval flow if true
meeting.approval.automatic=true

# Configuration for testing purposes
test.endpoints=on
#test.notification.stub.email.error.enabled=on
#test.notification.stub.sms.error.enabled=on

# Actuator (always,when-authorized)
management.endpoint.env.show-values=when-authorized
management.server.port=8289
management.endpoints.web.exposure.include=health,info
management.endpoint.health.enabled=true
management.endpoint.info.enabled=true
# To show info.app details
management.info.env.enabled=true