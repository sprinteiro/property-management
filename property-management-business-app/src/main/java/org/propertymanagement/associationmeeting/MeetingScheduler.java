package org.propertymanagement.associationmeeting;

import org.propertymanagement.associationmeeting.exception.InvalidMeetingInviteException;
import org.propertymanagement.associationmeeting.exception.MeetingScheduleException;
import org.propertymanagement.associationmeeting.exception.MeetingScheduleException.LogLevel;
import org.propertymanagement.associationmeeting.notification.MeetingNotification;
import org.propertymanagement.associationmeeting.notification.MeetingNotificationService;
import org.propertymanagement.associationmeeting.repository.MeetingRepository;
import org.propertymanagement.associationmeeting.repository.TrackerIdRepository;
import org.propertymanagement.associationmeeting.trackerid.DefaultTrackerIdManager;
import org.propertymanagement.associationmeeting.trackerid.TrackerIdManager;
import org.propertymanagement.domain.*;
import org.propertymanagement.neighbour.repository.NeighbourRepository;
import org.propertymanagement.util.CorrelationIdLog;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.nio.charset.StandardCharsets;
import java.util.Collection;
import java.util.stream.Collectors;

import static java.util.Objects.isNull;
import static java.util.Objects.nonNull;
import static java.util.Optional.ofNullable;
import static org.propertymanagement.util.CorrelationIdUtil.correlationIdAsBytes;
import static org.propertymanagement.util.CorrelationIdUtil.correlationIdAsString;


public class MeetingScheduler {
    private static final Logger log = LoggerFactory.getLogger(MeetingScheduler.class);
    private static final int MINIMUM_PARTICIPANTS = 4;
    private final MeetingRepository meetingRepository;
    private final NeighbourRepository neighbourRepository;
    private final MeetingNotification meetingNotificationService;
    private final TrackerIdManager trackerIdManager;
    private final CorrelationIdLog correlationIdLog;


    public MeetingScheduler(
            MeetingRepository meetingRepository,
            NeighbourRepository neighbourRepository,
            MeetingNotification meetingNotificationService,
            TrackerIdRepository trackerIdRepository,
            CorrelationIdLog correlationIdLog
    ) {
        this.meetingRepository = meetingRepository;
        this.neighbourRepository = neighbourRepository;
        this.meetingNotificationService = meetingNotificationService;
        this.trackerIdManager = new DefaultTrackerIdManager(trackerIdRepository);
        this.correlationIdLog = correlationIdLog;
    }

    public MeetingInvite newMeeting(MeetingInvite meetingInvite) {
        return correlationIdLog.execWithAutogeneratedCorrelationId(CorrelationIdLog.START, () -> {
            TrackerId trackerId = trackerIdManager.generateId();
            meetingInvite.setTrackerId(trackerId);
            meetingInvite.setCorrelationId(correlationIdLog.getCorrelationId().getBytes(StandardCharsets.UTF_8));
            boolean isTrackerIdRegistered = trackerIdManager.registerId(meetingInvite);
            if (!isTrackerIdRegistered) {
                String errorMessage = String.format("Unable to register a new meeting invite for CommunityId=%d  TrackerId generation failed", meetingInvite.getCommunityId().value());
                throw new MeetingScheduleException(
                        errorMessage + " CorrelationId=" + correlationIdLog.getCorrelationId(),
                        LogLevel.WARN);
            }
            notifyScheduledMeetingForRegistration(meetingInvite);
            return meetingInvite;
        });
    }

    public void fetchMeetingInviteAndNotifyScheduledMeetingForApproval(ApprovalMeetingInvite approval) {
        correlationIdLog.execWithAutogeneratedCorrelationId(CorrelationIdLog.START, () -> {
            checkValidApprovalMeetingInvite(approval);
            MeetingInvite meetingInvite = meetingRepository.fetchMeetingInvite(approval.getCommunityId(), approval.getTrackerId());
            checkValidApprover(approval, meetingInvite);
            byte[] correlationId = correlationIdAsBytes(correlationIdLog.getCorrelationId());
            MeetingInvite inviteWithCorrelationId = new MeetingInvite(meetingInvite, correlationId);
            checkValidInviteForApproval(inviteWithCorrelationId);
            ((MeetingNotificationService) meetingNotificationService).approveMeeting(inviteWithCorrelationId);
        });
    }

    public void notifyScheduledMeetingForApproval(MeetingInvite invite) {
        checkValidInviteForApproval(invite);
        meetingNotificationService.notifyForApproval(invite);
    }

    public MeetingInvite fecthMeetingInvite(CommunityId communityId, TrackerId trackerId) {
        return ofNullable(meetingRepository.fetchMeetingInvite(communityId, trackerId))
                .orElseThrow(() -> {
                    String message = String.format("Meeting not found. TrackerId=%s CommunityId=%d", trackerId.toString(), communityId.value());
                    return new MeetingScheduleException(message);
                });
    }

    public void resendMeetingInvite(ResendMeetingInviteRequest resendRequest) {
        correlationIdLog.execWithAutogeneratedCorrelationId(CorrelationIdLog.START, () -> {
            log.info("About to resend meeting invite. Type={} TrackerId={} CommunityId={} CorrelationId={}",
                    resendRequest.type(), resendRequest.trackerId(), resendRequest.communityId(), correlationIdLog.getCorrelationId());
            byte[] correlationIdAsBytes = correlationIdAsBytes(correlationIdLog.getCorrelationId());
            TrackerId trackerId = resendRequest.trackerId();
            CommunityId communityId = resendRequest.communityId();
            MeetingInvite persistedMeetingInvite = meetingRepository.fetchMeetingInvite(communityId, trackerId);

            if (isNull(persistedMeetingInvite)) {
                // The meeting invite was never sent as part of the registration process.
                log.info("About to fetch tracking details TrackerId={}", resendRequest.trackerId().toString());
                MeetingInvite persistedTrackedMeetingInvite = trackerIdManager.fetchMeetingInvite(resendRequest.trackerId());
                if (isNull(persistedTrackedMeetingInvite)) {
                    String message = "Unable to resend meeting invite for approval. Not found.";
                    throw new MeetingScheduleException(message + " CorrelationId=" + correlationIdLog.getCorrelationId(), message);
                }
                persistedTrackedMeetingInvite.setCorrelationId(correlationIdAsBytes);
                notifyScheduledMeetingForRegistration(persistedTrackedMeetingInvite);
                return;
            }

            if (resendRequest.type() == ResendMeetingInviteRequest.ResendType.FOR_APPROVAL) {
                persistedMeetingInvite.setCorrelationId(correlationIdAsBytes);
                notifyScheduledMeetingForApproval(persistedMeetingInvite);
                return;
            }
            if (resendRequest.type() == ResendMeetingInviteRequest.ResendType.TO_PARTICIPANTS) {
                if (isNull(persistedMeetingInvite.getApprovalDateTime())) {
                    String message = "Unable to resend meeting invite to participants. Approval date/time not found.";
                    throw new MeetingScheduleException(message + " CorrelationId=" + correlationIdLog.getCorrelationId(), message);
                }
                ScheduledAssociationMeeting persistedScheduledMeeting = meetingRepository.fetchScheduledAssociationMeeting(communityId, trackerId);
                if (isNull(persistedScheduledMeeting)) {
                    String message = "Unable to resend meeting invite to participants. Participants not found.";
                    throw new MeetingScheduleException(message + " CorrelationId=" + correlationIdLog.getCorrelationId(), message);
                }
                Collection<NeighbourgId> participantIds = persistedScheduledMeeting.participants().stream().map(Participant::id).collect(Collectors.toSet());
                Collection<Participant> participantsWithPhoneAndEmail = neighbourRepository.fetchNeighbours(participantIds);

                ScheduledAssociationMeeting scheduledAssociationMeeting =
                        new ScheduledAssociationMeeting(communityId, persistedScheduledMeeting.date(), persistedScheduledMeeting.time(), participantsWithPhoneAndEmail.stream().toList(), correlationIdAsBytes);
                notifyParticipants(scheduledAssociationMeeting);
            }
        });
    }

    public void notifyParticipants(ScheduledAssociationMeeting scheduledMeeting) {
        checkValidScheduledMeeting(scheduledMeeting);
        meetingNotificationService.notifyMeetingToParticipants(scheduledMeeting);
    }

    private void notifyScheduledMeetingForRegistration(MeetingInvite meetingInvite) {
        checkValidInviteForRegistration(meetingInvite);
        meetingNotificationService.notifyForCreation(meetingInvite);
    }

    private void checkValidScheduledMeeting(ScheduledAssociationMeeting scheduledMeeting) {
        if (isNull(scheduledMeeting.communityId())
                || isNull(scheduledMeeting.date())
                || isNull(scheduledMeeting.time())
                || isNull(scheduledMeeting.participants())
                || scheduledMeeting.participants().size() < MINIMUM_PARTICIPANTS
        ) {
            String message = "Invalid scheduled association meeting";
            throw new InvalidMeetingInviteException(message + " Invite=" + scheduledMeeting + " CorrelationId=" + correlationIdAsString(scheduledMeeting.correlationId()), message);
        }
    }

    private void checkValidInviteForRegistration(MeetingInvite invite) {
        if (isNull(invite)
                || isNull(invite.getCommunityId())
                || isNull(invite.getDate())
                || isNull(invite.getTime())
                || isNull(invite.getCorrelationId())
        ) {
            String message = "Invalid meeting invite for registration ";
            throw new InvalidMeetingInviteException(message + "Invite=" + invite + " CorrelationId=" + correlationIdAsString(invite.getCorrelationId()), message);
        }
    }

    private void checkValidApprovalMeetingInvite(ApprovalMeetingInvite approval) {
        if (isNull(approval)
                || isNull(approval.getApproverId())
                || isNull(approval.getTrackerId())
        ) {
            ApprovalMeetingInvite approvalMeetingInvite = nonNull(approval) ? approval : null;
            throw new MeetingScheduleException("Invalid approval meeting invite. Approval=" + approvalMeetingInvite + " CorrelationId=" + correlationIdAsString(approval.getCorrelationId()), "Invalid approval");
        }
    }

    private void checkValidInviteForApproval(MeetingInvite invite) {
        if (isNull(invite)
                || nonNull(invite.getApprovalDateTime())  // Assumption: the field contains a valued date and time content
                || isNull(invite.getCommunityId())
                || isNull(invite.getApproverId())
                || isNull(invite.getDate())
                || isNull(invite.getTime())
                || isNull(invite.getTrackerId())
                || isNull(invite.getCorrelationId())
        ) {
            StringBuilder message = new StringBuilder("Invalid meeting invite for approval.");
            if (nonNull(invite.getApprovalDateTime())) {
                message.append(" Approval date/time: ").append(invite.getApprovalDateTime()).append(" ");
            }
            throw new InvalidMeetingInviteException(message + "Invite=" + invite + " CorrelationId=" + correlationIdAsString(invite.getCorrelationId()), message.toString());
        }
    }

    private void checkValidApprover(ApprovalMeetingInvite approval, MeetingInvite meetingInvite) {
        if (!approval.getApproverId().value().equals(meetingInvite.getApproverId().value())) {
            throw new IllegalArgumentException("Invalid approver");
        }
    }

}
